{
    "swagger": "2.0",
    "info": {
      "title": "Setup API",
      "description": "This swagger document describes the endpoints of the Setup API.\n\nAll requests must be authenticated. Authentication can be provided either by an \n`Authorization` HTTP header containing an IBM Cloud UAA token, or a `Cookie` header\ncontaining a valid TIAM session cookie.\n**NOTE:** All API endpoints in this document should be considered **internal**.\nThey are not intended for public consumption at this time. Please direct questions\nto the #devops-dev-desktop channel on `ibm-cloudplatform.slack.com`.\n",
      "contact": {
        "url": "https://ibm-cloudplatform.slack.com/archives/devops-dev-desktop"
      },
      "version": "2.0.0"
    },
    "host": "dev.console.test.cloud.ibm.com",
    "schemes": [
      "https"
    ],
    "basePath": "/devops/setup/api/v2",
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "paths": {
      "/template/repo/{repo_url}": {
        "get": {
          "summary": "Reads a template from a repo.",
          "description": "The template repo endpoint returns the template data structure defined by the working\ntree of the given Git repository and branch. If the working tree does not contain a `.bluemix`\nfolder, a default template is returned.\nIf the template repo provided localized strings, then the returned template is localized according\nto the client's `Accept-Language` header.\n",
          "parameters": [
            {
              "name": "repo_url",
              "in": "path",
              "description": "The repository URL.",
              "required": true,
              "type": "string"
            },
            {
              "name": "branch",
              "in": "query",
              "description": "The branch name. The default is usually 'main' or 'master', as detected from the REST APIs, or defaulting to `master` if no REST API access.",
              "required": false,
              "type": "string"
            },
            {
              "name": "auth",
              "in": "query",
              "description": "The `auth=false` parameter allows this endpoint to be invoked without authorization.\nInternal use only, documenting for completeness.\n",
              "required": false,
              "default": true,
              "type": "boolean"
            }
          ],
          "tags": [
            "Template"
          ],
          "responses": {
            "200": {
              "description": "The template obtained from the repo.",
              "schema": {
                "$ref": "#/definitions/TemplateResponse"
              }
            },
            "400": {
              "description": "Invalid input parameters."
            },
            "401": {
              "description": "Missing or invalid authorization header."
            },
            "404": {
              "description": "The repository given in `repo_url` or branch given in `branch` did not exist.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "422": {
              "description": "The repo contained an ill-formed template.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "Internal error.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "/template/app/{region_id}/{app_guid}": {
        "get": {
          "summary": "Gets a template for a CloudFoundry app.",
          "description": "The template app endpoint returns a template data structure for the CloudFoundry\napplication identified by the `region_id` and `app_guid`.\nThe returned template is localized according to the clients's `Accept-Language` header.\n",
          "parameters": [
            {
              "name": "region_id",
              "in": "path",
              "description": "The CF region id that the app exists in.",
              "required": true,
              "type": "string"
            },
            {
              "name": "app_guid",
              "in": "path",
              "description": "The CF application guid.",
              "required": true,
              "type": "string"
            },
            {
              "name": "boilerplate_url",
              "in": "query",
              "description": "URL of the ACE boilerplate zip that the app was created from.",
              "required": false,
              "type": "string"
            }
          ],
          "tags": [
            "Template"
          ],
          "responses": {
            "200": {
              "description": "The template.",
              "schema": {
                "$ref": "#/definitions/TemplateResponse"
              }
            },
            "401": {
              "description": "Missing or invalid authorization header."
            },
            "404": {
              "description": "The app was not found.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "The provided `boilerplate_url` could not be downloaded, or other internal error occurred.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "/template/zip/{zip_url}": {
        "get": {
          "summary": "Reads a template from a zip file.",
          "description": "The template zip endpoint returns the template data structure defined by the `.bluemix` folder\ncontained in the zip file at the provided URL. If the zip does not contain a template, an error\nis returned.\nIf the template provides localized strings, then the returned template is localized according\nto the client's `Accept-Language` header.\n",
          "parameters": [
            {
              "name": "zip_url",
              "in": "path",
              "description": "The zip URL.",
              "required": true,
              "type": "string"
            }
          ],
          "tags": [
            "Template"
          ],
          "responses": {
            "200": {
              "description": "The template.",
              "schema": {
                "$ref": "#/definitions/TemplateResponse"
              }
            },
            "401": {
              "description": "Missing or invalid authorization header."
            },
            "404": {
              "description": "The app was not found.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "Internal error occurred.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "/template-ui/repo/{repo_url}": {
        "get": {
          "summary": "Gets a template and broker services for repo.",
          "description": "Get a template, and get service broker metadata for every service referenced by the template.\nReturned services are localized according to the request's `Accept-Language` header.\nIf the template repo provided localized strings, then the returned template is also localized\nin the same manner.\n\nThis endpoint is intended for use **ONLY** by the Setup client UI. Other clients who wish to\nobtain service broker metadata should directly invoke\n[/v1/services](https://otc-swagger.us-south.devops.dev.cloud.ibm.com/swagger-ui?url=https://otc-api.us-south.devops.dev.cloud.ibm.com/spec/swagger.json#/services/getServices).\n",
          "parameters": [
            {
              "name": "repo_url",
              "in": "path",
              "description": "The repository URL.",
              "required": true,
              "type": "string"
            },
            {
              "name": "branch",
              "in": "query",
              "description": "The branch name. The default is usually 'main' or 'master', as detected from the REST APIs, or defaulting to `master` if no REST API access.",
              "required": false,
              "type": "string"
            },
            {
              "name": "refreshServices",
              "in": "query",
              "description": "If this parameter is present in the query, the returned services are guaranteed to be freshly\nfetched using the caller's credentials. When this parameter is omitted, the returned services\nmay be served from cache.\n",
              "allowEmptyValue": true,
              "type": "boolean",
              "required": false
            }
          ],
          "tags": [
            "Template and Catalog"
          ],
          "responses": {
            "200": {
              "description": "Template, along with the broker catalog entry for every service referenced\nwithin the template.\n",
              "schema": {
                "$ref": "#/definitions/TemplateAndCatalogResponse"
              }
            },
            "401": {
              "description": "Missing or invalid authorization header."
            },
            "404": {
              "description": "The `repo_url` or `branch` did not exist.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "422": {
              "description": "The repo contained an ill-formed template.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "Internal error.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "/template-ui/app/{region_id}/{app_guid}": {
        "get": {
          "summary": "Gets template and broker services for a CloudFoundry app.",
          "description": "Get a template for a CloudFoundry app, and get service broker metadata for every service referenced by the template.\n\nReturned services are localized according to the request's `Accept-Language` header.\nThe returned template is localized according to the clients's `Accept-Language` header.\nThis endpoint is intended for use **ONLY** by the Setup client UI. Other clients who wish to\nobtain service broker metadata should directly invoke\n[/v1/services](https://otc-swagger.us-south.devops.dev.cloud.ibm.com/swagger-ui?url=https://otc-api.us-south.devops.dev.cloud.ibm.com/spec/swagger.json#/services/getServices).\n",
          "parameters": [
            {
              "name": "region_id",
              "in": "path",
              "description": "The CF region id that the app exists in. For example, `ibm%3Ayp%3Aus-south`.",
              "required": true,
              "type": "string"
            },
            {
              "name": "app_guid",
              "in": "path",
              "description": "The CF application guid.",
              "required": true,
              "type": "string"
            },
            {
              "name": "boilerplate_url",
              "in": "query",
              "description": "URL of the ACE boilerplate zip that the app was created from.",
              "required": false,
              "type": "string"
            }
          ],
          "tags": [
            "Template and Catalog"
          ],
          "responses": {
            "200": {
              "description": "The template and service broker metadata.",
              "schema": {
                "$ref": "#/definitions/TemplateAndCatalogAndAppResponse"
              }
            },
            "401": {
              "description": "Missing or invalid authorization header."
            },
            "404": {
              "description": "The app was not found.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "The provided `boilerplate_url` could not be downloaded.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Internal error occurred.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "/toolchains": {
        "post": {
          "summary": "Create toolchain.",
          "description": "The toolchains endpoint creates a toolchain and services from a template.\nSetup provides the `toolchain` object of the request body mostly \"as-is\" to otc-api,\nwith the following exceptions:\n* The map of `services` provided in the request body is used to generate the `toolchain.services`\n  array provided to otc-api.\n* Setup fills in the `toolchain_binding` and `organization_guid` properties for each service \n  automatically using the service name and the toolchain's `organization_guid`.\nWhen the optional `extras` property is provided in the request body, Setup will asynchronously\ncreate additional resources to accompany the toolchain. (The `extras` property is intended\nfor use only by the Setup client UI; external callers should omit it.)\n",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateToolchainFromTemplateRequestBody"
              }
            }
          ],
          "tags": [
            "Toolchain"
          ],
          "responses": {
            "201": {
              "description": "Toolchain was created successfully.",
              "headers": {
                "Location": {
                  "description": "The URL of the created toolchain.",
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "400": {
              "description": "Missing toolchain properties"
            },
            "401": {
              "description": "Missing or invalid authorization header"
            },
            "403": {
              "description": "User is not a member of the specified `organization_guid`"
            },
            "404": {
              "description": "Some service contained an unknown `service_id`"
            },
            "409": {
              "description": "The provided `key` or `name` is already used by another toolchain."
            },
            "500": {
              "description": "An error occurred creating the toolchain.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Internal error occurred.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "CDServiceExtra": {
        "allOf": [
          {
            "$ref": "#/definitions/Extra"
          },
          {
            "type": "object",
            "description": "TODO - should we have a `region_id` param too??",
            "required": [
              "space_guid"
            ],
            "properties": {
              "space_guid": {
                "description": "Id of the space that the CD service will be created in.",
                "type": "string"
              }
            }
          }
        ]
      },
      "DeployableMappingExtra": {
        "allOf": [
          {
            "$ref": "#/definitions/Extra"
          },
          {
            "type": "object",
            "required": [
              "deployable",
              "toolchain"
            ],
            "properties": {
              "deployable": {
                "type": "object",
                "required": [
                  "deployable_guid",
                  "organization_guid",
                  "region_id"
                ],
                "properties": {
                  "deployable_guid": {
                    "description": "The CF app guid.",
                    "type": "string"
                  },
                  "organization_guid": {
                    "description": "Id of the org that the CF app exists in.",
                    "type": "string"
                  },
                  "region_id": {
                    "description": "Id of the region that the CF app exists in.",
                    "type": "string"
                  }
                }
              },
              "toolchain": {
                "type": "object",
                "required": [
                  "toolchain_guid",
                  "region_id"
                ],
                "properties": {
                  "toolchain_guid": {
                    "type": "string"
                  },
                  "region_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "CreateToolchainFromTemplateRequestBody": {
        "type": "object",
        "required": [
          "toolchain",
          "services"
        ],
        "properties": {
          "toolchain": {
            "$ref": "#/definitions/ToolchainToCreate"
          },
          "services": {
            "$ref": "#/definitions/ServicesMap"
          },
          "extras": {
            "description": "**Internal use only.** Describes additional resources to be created after the toolchain.\nThis type is incompletely specified due to Swagger limitations. Each element of `extras`\nmust satisfy one of the following types: `#/definitions/CDServiceExtra` or\n`#/definitions/DeployableMappingExtra`.\n",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Extra"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "description",
          "status"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "details": {
            "description": "Provides additional information about the error.",
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "error",
              "warning"
            ]
          }
        }
      },
      "Extra": {
        "type": "object",
        "description": "Models an additional resource to be created alongside a toolchain. This type\nis abstract.\n",
        "required": [
          "type"
        ],
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "deployable",
              "cd"
            ]
          }
        }
      },
      "FormsMap": {
        "type": "object",
        "description": "Maps a `service_id` of ServiceMap to a `Form` that controls how such services will\nbe visualized in the UI.\n",
        "additionalProperties": {
          "$ref": "#/definitions/Form"
        }
      },
      "Form": {
        "type": "object",
        "description": "Controls how services of a particular `service_id` are visualized in the UI.\n",
        "properties": {
          "description": {
            "type": "string"
          },
          "parameters": {
            "description": "Freeform map of parameters.",
            "type": "object"
          },
          "schema": {
            "type": "object"
          }
        }
      },
      "ImageURI": {
        "type": "string",
        "description": "URI for an image. Data URI is allowed.",
        "format": "uri"
      },
      "Markdown": {
        "type": "string",
        "description": "A string containing Markdown text."
      },
      "ServicesMap": {
        "description": "Describes the set of services that Setup will attach to a newly created toolchain.\nThe keys define labels for the services. Values are of type `Service`.\n",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/Service"
        }
      },
      "ServiceBrokerMetadata": {
        "type": "object",
        "description": "Subset of the properties returned by otc-api /v1/services API. Consult that Swagger for the complete schema.\n",
        "required": [
          "entity",
          "metadata"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "entity": {
            "type": "object",
            "description": "For schema consult [ServiceEntity](https://otc-swagger.us-south.devops.dev.cloud.ibm.com/swagger-ui?url=https://otc-api.us-south.devops.dev.cloud.ibm.com/spec/swagger.json#/services/getServices)"
          },
          "metadata": {
            "type": "object",
            "description": "For schema consult [ServiceCatalogMetadata](https://otc-swagger.us-south.devops.dev.cloud.ibm.com/swagger-ui?url=https://otc-api.us-south.devops.dev.cloud.ibm.com/spec/swagger.json#/services/getServices)"
          },
          "tags": {
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Service": {
        "type": "object",
        "description": "Represents a desired service to be created and bound along with a toolchain.",
        "properties": {
          "parameters": {
            "description": "Freeform map of service parameters.",
            "type": "object"
          },
          "schema": {
            "description": "If provided, overrides the schema specified by the broker catalog entry.",
            "type": "object"
          },
          "service_id": {
            "type": "string"
          }
        }
      },
      "Template": {
        "type": "object",
        "required": [
          "template",
          "toolchain",
          "services",
          "version"
        ],
        "description": "Represents a template for toolchains.",
        "properties": {
          "version": {
            "type": "string",
            "enum": [
              "2"
            ]
          },
          "template": {
            "$ref": "#/definitions/TemplateMetadata"
          },
          "toolchain": {
            "$ref": "#/definitions/Toolchain"
          },
          "services": {
            "$ref": "#/definitions/ServicesMap"
          },
          "form": {
            "$ref": "#/definitions/FormsMap"
          }
        }
      },
      "TemplateMetadata": {
        "type": "object",
        "description": "Information about this template itself",
        "properties": {
          "description": {
            "type": "string"
          },
          "header": {
            "$ref": "#/definitions/Markdown"
          },
          "icon": {
            "$ref": "#/definitions/ImageURI"
          },
          "info": {
            "type": "object",
            "description": "Optional information that appears in the UI if present.",
            "properties": {
              "repository": {
                "type": "string"
              },
              "branch": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "required": {
            "description": "List of service labels giving the services that must be valid in order for this toolchain\nto be created.\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TemplateResponse": {
        "type": "object",
        "required": [
          "template",
          "warnings"
        ],
        "properties": {
          "template": {
            "$ref": "#/definitions/Template"
          },
          "warnings": {
            "$ref": "#/definitions/Warnings"
          }
        }
      },
      "TemplateAndCatalogResponse": {
        "type": "object",
        "required": [
          "template",
          "services",
          "warnings",
          "source"
        ],
        "properties": {
          "template": {
            "$ref": "#/definitions/Template"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServiceBrokerMetadata"
            }
          },
          "warnings": {
            "$ref": "#/definitions/Warnings"
          },
          "source": {
            "type": "string",
            "enum": [
              "add",
              "default",
              "repo"
            ],
            "description": "Indicates whether the template originated from a `toolchain.yml` file provided in the repository (\"repo\"),\nfrom the D2BM toolchain (\"default\"), or from the Enable Continuous Delivery (\"add\"). Internal use only,\ndocumenting for completeness.\n"
          }
        }
      },
      "TemplateAndCatalogAndAppResponse": {
        "allOf": [
          {
            "$ref": "#/definitions/TemplateAndCatalogResponse"
          },
          {
            "type": "object",
            "required": [
              "app"
            ],
            "properties": {
              "app": {
                "description": "CF app info",
                "type": "object"
              }
            }
          }
        ]
      },
      "Toolchain": {
        "description": "Information about a toolchain to be created.\n\nThis data type intentionally resembles otc-api's [createToolchain type](https://otc-swagger.us-south.devops.dev.cloud.ibm.com/swagger-ui?url=https://otc-api.us-south.devops.dev.cloud.ibm.com/spec/swagger.json#/toolchains/createToolchains).\n",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_guid": {
            "description": "Guid of the organization that this toolchain will be created in.",
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "generator": {
            "type": "string"
          },
          "template": {
            "description": "Freeform metadata about the template that created this toolchain.",
            "type": "object"
          }
        }
      },
      "ToolchainToCreate": {
        "description": "Stricter extension of Toolchain required for the POST.",
        "allOf": [
          {
            "$ref": "#/definitions/Toolchain"
          },
          {
            "type": "object",
            "required": [
              "generator",
              "key",
              "name",
              "organization_guid"
            ],
            "properties": {
              "generator": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "organization_guid": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Warnings": {
        "type": "array",
        "description": "Non-fatal problems found with the template.",
        "items": {
          "type": "string"
        }
      }
    }
  }